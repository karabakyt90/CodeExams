"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _express = _interopRequireDefault(require("express"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _morgan = _interopRequireDefault(require("morgan"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('@wdio/static-server-service');
const DEFAULT_LOG_NAME = 'wdio-static-server-service.log';

class StaticServerLauncher {
  constructor({
    folders,
    port = 4567,
    middleware = []
  }) {
    this.folders = folders ? Array.isArray(folders) ? folders : [folders] : null;
    this.port = port;
    this.middleware = middleware;
  }

  async onPrepare({
    outputDir
  }) {
    if (!this.folders) {
      return;
    }

    this.server = (0, _express.default)();

    if (outputDir) {
      const file = _path.default.join(outputDir, DEFAULT_LOG_NAME);

      _fsExtra.default.createFileSync(file);

      const stream = _fsExtra.default.createWriteStream(file);

      this.server.use((0, _morgan.default)('tiny', {
        stream
      }));
    }

    this.folders.forEach(folder => {
      log.info('Mounting folder `%s` at `%s`', _path.default.resolve(folder.path), folder.mount);
      this.server.use(folder.mount, _express.default.static(folder.path));
    });
    this.middleware.forEach(ware => this.server.use(ware.mount, ware.middleware));
    await (0, _util.promisify)(this.server.listen.bind(this.server))(this.port);
    log.info(`Static server running at http://localhost:${this.port}`);
  }

}

exports.default = StaticServerLauncher;